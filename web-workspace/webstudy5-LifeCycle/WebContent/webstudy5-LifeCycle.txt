ref) webstudy5 웹프로젝트는 web module version 2.5로 생성
     이는 Servlet 생성시 xml 기반 설정이 자동으로 생성된다.
     (3.0 이상부터는 Servlet 생성시 Annotation 기반 설정으로 자동 생성)

**오늘 주요 목차**
- request.getParameterValues()

- Servlet LifeCycle
  아래의 Servlet LifeCycle 메서드는 Web Container에 의해 호출
  init(ServletConfig) -> service(request, response) -> destroy()
  Constructor : 객체 초기화 -> 1번
  init() : Servlet 초기화 -> 1번
  service() : Client에게 Service -> Client 요청수에 비례
  destroy() : Servlet이 Server에서 해제되기 직전에 호출 -> 1번
  						   	   WAS(Web Container)
  Client   --request-->   is loaded?   --no-->   class loading
  									|								|
  									|					    Object 생성(Constructor 호출)
  								  yes	    						|
  									|						init(ServletConfig)
  									|						     	|
  									|---------------->   service(request, response) - doGet() or doPost()
  									   <--response--
  										destroy()	
  																 
- ServletConfig
  Servlet 객체가 Web Program으로 일하는 데 필요한 정보를 가지고 있는 객체
  Servlet 객체당 하나
  Web Container에 의해 각 Servlet의 init(ServletConfig) 메서드가 호출될 때 주입된다.
  Web Container에 의해 전달받는 Servlet Configuration Object 개별 Servlet 설정 정보 객체이다.
  주로 사용되는 용도는 Spring Framework의 Web Application 환경 설정시,
  Spring Framework 설정 파일 정보를 특정 Servlet(DispatcherServlet)에게 전달할 때 활용된다.
  또한, Web Application내에 
  모든 Servlet과 JSP가 공유할 수 있는 객체인 ServletContext를 활용하기 위해서는,
  반드시 ServletConfig 객체가 필요하다.
  ex) spring framework에서 ServletConfig 활용 사례
  <servlet>
  	<servlet-name>AppServlet</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!--ServletConfig 초기 Parameter를 설정하여 DispatcherServlet의 init() 호출시 전달되도록 설정한다.
  		 자신이 설정한 spring 설정파일 정보를 DispatcherServlet에 전달한다.-->
  		<init-param>
  			<param-name>contextConfigLocation</param-name>
  			<param-value>application-context.xml</param-value>
  		</init-param>
  		<load-on-startup>1</load-on-startup>
  </servlet>

- ServletContext
  Web Application당 하나 생성
  Web Application 시작 시점에 Web Container가 ServletContext 객체를 생성한다.
  Web Application 전역에서 필요한 환경 정보를 저장
  모든 Servlet과 JSP는 ServletContext에 접근 가능하고,
  필요시 정보를 할당 및 반환받을 수도 있다.
  각 Servlet과 JSP는 자신의 ServletConfig 객체가 할당되어 있어서,
  ServletContext를 접근해 사용할 수 있다.
  ex) Client가 LoginServlet에 100명이 접속해서 Login Service를 제공받았다.
  	   LoginServlet 객체 몇 개? 1개
       LoginServlet의 ServletConfig 몇 개? 1개
       LoginServlet의 init() 몇 번 호출? 1개
       LoginServlet의 service() 몇 번 호출? 100번
       LoginServlet의 Thread 몇 개 생성? 100개
       LoginServlet의 destroy() 몇 번 호출? 죽기 전에 1번
       LoginServlet의 ServletContext는 몇 개? 1개(Web Application당)
       
**오늘 주요 개념**
Servlet LifeCycle의 전체 흐름
Servlet Interface의 LifeCycle 메서드 init(), service(), destroy()
ServletConfig
ServletContext
Web Container의 역할

**내일 주요 목차**
ServletContext
ServletContextListener
Servlet과 DB 연동
 