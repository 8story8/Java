**11일차 주요 목차**
final : 상수 or 오버라이딩 방지 or subclassing 방지(상속 불가)
ex) final String MY_PASSWORD = "JAVAKING";
     // 위는 재할당 불가능한 상수가 된다.
     
static : 정적 <---> 동적 : object
static 변수는 class 변수로도 불린다.(Class Variable)
static으로 선언되면 class loading시 단 한 번 메모리에 적재
static 변수는 별도의 객체 생성없이 메모리에 적재된다.
  - Java Memory는 Stack 영역, Heap 영역, Method 영역으로 구성
    Method 영역(Class 영역) : static 정보, method 정보 저장
    Stack 영역 : Local Variable 정보 저장 
    Heap 영역 : Instance Variable 정보 저장
  - Java 프로그램(.java)이 컴파일(.class)후
    실행 단계
    : class loading -- 코드 검증 -- 실행(runtime)
      (static 적재)					   main ---> 객체 생성...
  - **static 특징**
    별도의 객체 생성없이 클래스명.변수 or 메서드로 사용 가능
    static			non-static
          <------ 직접 접근 가능
          ------> 직접 접근 불가(접근하기 위해서는 객체 생성 필요)

abstract
추상 클래스와 추상 메서드 정의시 사용되는 Java Keyword
Why? 부모 클래스에서 자식 클래스에게 구현을 강제함으로써 표준화에 기여
특징 : abstract Class는 직접 객체화될 수 없다.
        (new Person() --> Error)
        abstract Method는 자식(하위) 클래스에서 반드시 구현
        결론적으로 abstract Class는 자식에게 멤버를 물려주고 기능 구현을 강제하는 역할을 주로 한다.

Template Method Design Pattern
-> Design Pattern
: 부모 클래스(추상 클래스)에서 업무의 흐름(틀, 알고리즘 뼈대)을 정의하고
  자식 클래스에서 업무를 구체화하는 설계 패턴

**12일차 주요 목차**
interface
- 개념
  일종의 추상 클래스
  추상 클래스보다 추상화 정도가 높아서,
  추상 클래스와 달리 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다.
- 구성 요소
  추상 메서드, 상수만을 멤버로 가진다.
- 표현
  interface 인터페이스명
  {
  		public static final 타입 상수명 = 값;
  		public abstract 메서드명(매개변수목록);
  }
  class 클래스명 implements 인터페이스명
  {
  }
- 특징
  1. 다중 상속
     - 인터페이스는 인터페이스로부터만 상속받을 수 있으며, 다중 상속이 가능
  2. 다형성
     - 개발 시간 단축
  3. 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
  4. 독립적인 프로그래밍
     - 클래스의 선언과 구현을 분리시켜 실제 구현시 독립적인 프로그램을 작성하는 것이 가능
     - 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하여,
       한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는다.
   